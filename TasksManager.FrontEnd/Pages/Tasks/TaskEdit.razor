@page "/tasks/edit/{Id:int}"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3>Task Edit</h3>

@if (myTask is null)
{
    <p>Loading...</p>
}else
{
    <TaskForm MyTask="myTask" OnValidSubmit="SaveAsync" ReturnAction="Return"></TaskForm>
}



@code {
    private MyTask? myTask;

    [Parameter]
    public int Id { get; set; }

    //--------------------------------------------------------------------------------------------------------
    protected async override Task OnInitializedAsync()
    {
        var responseHttp = await repository.GetAsync<MyTask>($"api/MyTasks/{Id}");
        if (!responseHttp.IsSuccess)
        {
            await sweetAlertService.FireAsync("Error", responseHttp.Message, SweetAlertIcon.Error);
        }
        myTask = responseHttp.Result;
    }

    //--------------------------------------------------------------------------------------------------------
    private async void SaveAsync()
    {
        var responseHttp = await repository.PutAsync("api/MyTasks/", myTask);
        if (!responseHttp.IsSuccess)
        {
            await sweetAlertService.FireAsync("Error", responseHttp.Message, SweetAlertIcon.Error);
        }
        Return();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.Center,
                ShowCloseButton = true,
                Timer = 3000,
            });
        await toast.FireAsync(icon: SweetAlertIcon.Info, message: "Task updated succesfully");
    }

    //--------------------------------------------------------------------------------------------------------
    private void Return()
    {
        navigationManager.NavigateTo("/tasks");
    }
}
